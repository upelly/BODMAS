#include <iostream>
#include <iomanip>
#include <string>
#include <cmath>
using namespace std;


int factorial(int a)
{
    if (a==0)
        return 1;
    return a*factorial(a-1);
}


//converts string to a number
double converttodouble(string a)
{
    bool decimal=false;
    double answer=0;
    int positionofdecimal=0;
    for (int i=0;i<a.length();i++)
    {
        switch (a[i])
        {
            case '1':
                answer+=1;
                break;
            case '2':
                answer+=2;
                break;
            case '3':
                answer+=3;
                break;
            case '4':
                answer+=4;
                break;
            case '5':
                answer+=5;
                break;
            case '6':
                answer+=6;
                break;
            case '7':
                answer+=7;
                break;
            case '8':
                answer+=8;
                break;
            case '9':
                answer+=9;
                break;
            case '.':
                positionofdecimal=a.length()-i;
                answer/=10;
                decimal=true;
                break;
        }
        answer*=10;
    }
    answer/=(pow(10,positionofdecimal+1));
    if (a[0]=='-')
        answer=answer*(-1);
    if (decimal)
        answer*=10;
    return answer;
}



//returns true if the string is also a valid number
bool isnumber(string a)
{
    bool dotused=false;
    if (!((a[0]=='0')||(a[0]=='1')||(a[0]=='2')||(a[0]=='3')||(a[0]=='4')||(a[0]=='5')||(a[0]=='6')||(a[0]=='7')||(a[0]=='8')||(a[0]=='9')||(a[0]=='.')||(a[0]=='-')))
        return 0;
    if (a[0]=='.')
        dotused=true;

    for (int i=1;i<a.length();i++)
    {
        if (!((a[i]=='0')||(a[i]=='1')||(a[i]=='2')||(a[i]=='3')||(a[i]=='4')||(a[i]=='5')||(a[i]=='6')||(a[i]=='7')||(a[i]=='8')||(a[i]=='9')||(a[i]=='.')))
            return 0;
        if (a[i]=='.' && dotused)
            return 0;
        if (a[i]=='.')
            dotused=true;
    }
    return 1;
}



//self explanatory
int numberofoperandsinbrackets(string a)
{
    int counter=0;
    int startofoperand=0;
    for (int i=0;i<a.length();i++)
    {
        if (!isnumber(a.substr(startofoperand,i-startofoperand+1)))
        {
            counter++;
            i++;
            startofoperand=i+1;

        }
    }
    return counter+1;




}




//this takes in a string and the starting position of a number in that string, and returns the length of the number (staring counting from 0)
int findendofnumber(string a, int b)
{
    a=a+"a";
    for (int i=1;i<=a.length();i++)
    {
        if (!(isnumber(a.substr(b,i))))
        {
            return (i-2);
        }
    }
    return b;
}



//this takes in a string and the position AFTER an opening bracket in that string, and returns the position of the corresponding closing bracket
int findendofbracket(string a,int b)
{
    if (a[b]==')')
        return 1;
    int opening=1;
    int closing=0;
    int i=b;
    do
    {
        if (a[i]=='(')
        {
            opening++;
        }
        if (a[i]==')')
        {
            closing++;
        }
        i++;
    }while (opening!=closing);
    return i-1;
}


//this takes in a string and the position BEFORE a closing bracket in that string, and returns the position of the corresponding opening bracket
int findstartofbracket(string a, int b)
{
    if (a[b]=='(')
        return 1;
    int opening=0;
    int closing=1;
    int i=b;
    do
    {
        if (a[i]=='(')
        {
            opening++;
        }
        if (a[i]==')')
        {
            closing++;
        }
        i--;
    }while (opening!=closing);
    return i+1;
}


//returns true if expression contains a specified operator like +-*/ etc
bool expressioncontainsoperator(string a, char b)
{
    for (int i=0;i<a.length();i++)
    {
        if (a[i]==b)
        {
            return true;
        }
    }
    return false;
}



//this adds brackets to the expression string to make it workable for the evaluate function
string addbrackets(string a)
{
    if (numberofoperandsinbrackets(a)==1)
        return a+"+0";
    if (numberofoperandsinbrackets(a)==2)
        return a;

    const int numberofoperatorsadded=15;
    char operators[numberofoperatorsadded]={'!','n','l','r','s','c','t','a','b','d','^','/','*','+','-'}; // changing the order of these characters will change the order of preference for BODMAS
    int startofnumber, endofnumber;
    string temp,temp2;
    for (int j=0;j<numberofoperatorsadded;j++)
    {
        if (expressioncontainsoperator(a,operators[j]))
        {
            for (int i=0;i<a.length();i++)
            {
                if (a[i]=='(')
                {
                    i=findendofbracket(a,i+1);
                }
                if (a[i]==operators[j])
                {


                    if (a[i-1]==')')
                    {
                        startofnumber=findstartofbracket(a,i-2);
                    }
                    else
                    {
                        startofnumber=i-1;
                        while (isnumber(a.substr(startofnumber,i-startofnumber))&&startofnumber>-1)
                        {
                            startofnumber--;
                            if (startofnumber<0)
                                break;
                        }
                        startofnumber++;
                    }
                    temp=a.substr(0,startofnumber)+"("+a.substr(startofnumber);
                    a=temp;




                    if (a[i+2]=='(')
                    {
                        endofnumber=findendofbracket(a,i+3);
                    }
                    else
                    {
                        endofnumber=i+2;
                        a=a+"`";
                        while (isnumber(a.substr(i+2,endofnumber-i)))
                        {
                            endofnumber++;
                        }
                        a=a.substr(0,a.length()-1);
                    }
                    temp=a.substr(0,endofnumber+1)+")"+a.substr(endofnumber+1);
                    a=temp;
                    i=endofnumber+1;
                }
            }
        }
    }
    return a.substr(1,a.length()-2);
}






//this converts the operators to single characters surrounded by numbers so that the evaluate function can solve them
string treatforfunctions(string a)
{

    /*
    s=sin
    c=cos
    t=tan
    l=log
    n=natural log (entered as ln)
    a=inverse sin (entered as arcsin)
    b=inverse cos (entered as arccos)
    d=inverse tan (entered as arctan)
    !=factorial
    r=square root (entered as sqrt)

    */
    a=a+"xxxxxx";
    for (int i=0;i<a.length();i++)
    {
        if (a.substr(i,3)=="sin")
        {
            a=a.substr(0,i)+"1s"+a.substr(i+3);
        }
        if (a.substr(i,3)=="cos")
        {
            a=a.substr(0,i)+"1c"+a.substr(i+3);
        }
        if (a.substr(i,3)=="tan")
        {
            a=a.substr(0,i)+"1t"+a.substr(i+3);
        }
        if (a.substr(i,3)=="log")
        {
            a=a.substr(0,i)+"1l"+a.substr(i+3);
        }
        if (a.substr(i,2)=="ln")
        {
            a=a.substr(0,i)+"1n"+a.substr(i+2);
        }
        if (a.substr(i,6)=="arcsin")
        {
            a=a.substr(0,i)+"1a"+a.substr(i+6);
        }
        if (a.substr(i,6)=="arccos")
        {
            a=a.substr(0,i)+"1b"+a.substr(i+6);
        }
        if (a.substr(i,6)=="arctan")
        {
            a=a.substr(0,i)+"1d"+a.substr(i+6);
        }
        if (a.substr(i,1)=="!")
        {
            a=a.substr(0,i)+"!1"+a.substr(i+1);
        }
        if (a.substr(i,4)=="sqrt")
        {
            a=a.substr(0,i)+"1r"+a.substr(i+4);
        }


    }
    a=a.substr(0,a.length()-6);
    return a;
}




//this function inputs the two numbers and the operator, and returns the answer to that operation
//TODO: add more operations
double calculate(double a, double b, char c)
{
    switch (c)
    {
    case '+':
        return a+b;
        break;
    case '-':
        return a-b;
        break;
    case '*':
        return a*b;
        break;
    case '/':
        if (b==0)
        {
            cout << "ERROR - DIVIDING BY ZERO";
            return 0;
        }
        return a/b;
        break;
    case 's':
        if (a<0)
            return 0-sin(b);
        return sin(b);
        break;
    case 'c':
        if (a<0)
            return 0-cos(b);
        return cos(b);
        break;
    case 't':
        if (a<0)
            return 0-tan(b);
        return tan(b);
        break;
    case 'l':
        if (a<0)
            return 0-log10(b);
        return log10(b);
        break;
    case 'n':
        if (a<0)
            return 0-log(b);
        return log(b);
        break;
    case 'a':
        if (a<0)
            return 0-asin(b);
        return asin(b);
        break;
    case 'b':
        if (a<0)
            return 0-acos(b);
        return acos(b);
        break;
    case 'd':
        if (a<0)
            return 0-atan(b);
        return atan(b);
        break;
    case '!':
        if (a<0)
            return 0-factorial(0-a);
        return factorial(a);
        break;
    case 'r':
        if (a<0)
            return 0-sqrt(b);
        return sqrt(b);
        break;
    case '^':
        return pow(a,b);
        break;
    default:
        cout << "ERROR - INVALID OPERAND\n";
        return 0;
        break;
    }
}

//This function evaluates the string by breaking it down bracket-wise and solving each bracket recursively
double evaluate(string a)
{
    if (a[0]=='(' && a[a.length()-1]==')')
    {
        if (findendofbracket(a,1)==a.length()-1)
        {
            string temp=a.substr(1,a.length()-2);
            return evaluate(temp);
        }
    }



    a=addbrackets(a);
    double firstanswer;
    double secondanswer;
    string firstans, secondans;
    int endofbrackets;
    char operate;
    if (a[0]=='(')
    {
        endofbrackets=findendofbracket(a,1);
        firstans=a.substr(1,endofbrackets-1);
        firstans=addbrackets(firstans);
        firstanswer=evaluate(firstans);
    }
    else
    {
        endofbrackets=findendofnumber(a,0);
        firstans=a.substr(0,endofbrackets+1);
        firstanswer=converttodouble(firstans);
    }
    operate=a[endofbrackets+1];
    a=a.substr(endofbrackets+2);
    if (a[0]=='(')
    {
        endofbrackets=findendofbracket(a,1);
        secondans=a.substr(1,endofbrackets-1);
        secondans=addbrackets(secondans);
        secondanswer=evaluate(secondans);
    }
    else
    {
        endofbrackets=findendofnumber(a,0);
        secondans=a.substr(0,endofbrackets+1);
        secondanswer=converttodouble(secondans);
    }

    return calculate(firstanswer,secondanswer,operate);
}



string patchnegativebug(string a)
{
    for (int i=1;i<a.length();i++)
    {
        if (a[i]=='-')
        {
            if ((a[i-1]==')' || isnumber(a.substr(i-1,1)))&& a[i+1]!='(')
            {
                a=a.substr(0,i)+"+"+a.substr(i);
            }
        }
    }
    return a;
}



double solve(string a)
{
    a=treatforfunctions(a);
    a=patchnegativebug(a);
    return evaluate(a);
}



int main()
{



    string a;
    getline(cin,a);
    cout << solve(a);



    return 0;
}